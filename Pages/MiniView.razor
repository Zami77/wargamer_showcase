@page "/miniview/{mini_id}"

@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options

@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject ICosmosDbService cosmosDbService
@inject IJSRuntime iJSRuntime
@inject ILogger<MiniView> logger

<div class="@detailMini.MiniName-mini-view">
    <h3> @detailMini.MiniName</h3>
    <img src="@detailMini.Image" alt="@detailMini.MiniName" style="max-width: 100%;" />
    <p>Game: @detailMini.Game</p>
    <p>Faction: @detailMini.Faction</p>
    <div class="row">

        @foreach (var elem in detailMini.Elements)
        {
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">@elem.Name</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="elem.PaintsUsed">

                        <RowTemplate>
                            <MudTd>@context.PaintDetail</MudTd>
                            <MudTd>@context.PaintName</MudTd>
                            <MudTd>
                                <svg width="20" height="20">
                                    <rect width="20" height="20" style="fill:@context.PaintHex;stroke-width:3;stroke:rgb(0,0,0)" />
                                </svg>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        }
    </div>
</div>

<AuthorizeView>
    <Authorized>
        @{
            curUsername = context.User.FindFirst(c => c.Type == "signinname")?.Value ?? "";
        }
        @if (userCreatedMini)
        {
            <button class="btn btn-danger" @onclick="DeleteMini">Delete Mini</button>
        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string mini_id { get; set; }
    Mini detailMini = new();
    User curUser = new();
    string curUsername = "";
    bool userCreatedMini = false;

    protected override async Task OnInitializedAsync()
    {
        detailMini = await cosmosDbService.GetMiniAsync(this.mini_id);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (curUsername.Length > 0 && String.IsNullOrWhiteSpace(curUser.Username))
        {
            curUser = await cosmosDbService.GetUserByNameAsync(curUsername);
            logger.LogInformation($"Found user:{curUser.Username}");
            userCreatedMini = curUser.Minis.Contains(mini_id);
            this.StateHasChanged();
        }
    }

    public async void DeleteMini()
    {
        var response = await iJSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {detailMini.MiniName}?");

        if (response)
        {
            if (curUser.Minis.Remove(detailMini.Id))
            {
                logger.LogInformation($"Successfully removed {detailMini.MiniName}");
            }
            await cosmosDbService.UpdateUserAsync(curUser.Id, curUser);
            await cosmosDbService.DeleteMiniAsync(detailMini.Id);
            navManager.NavigateTo("/myminis");
        }
    }
}
