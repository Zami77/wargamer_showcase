@page "/miniview/{mini_id}"

@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Primitives;
@using Microsoft.AspNetCore.WebUtilities;

@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject ICosmosDbService cosmosDbService
@inject IJSRuntime iJSRuntime
@inject ILogger<MiniView> logger
<h3>Mini View</h3>

<AuthorizeView>
    <Authorized>
        @{
            curUsername = context.User.FindFirst(c => c.Type == "signinname")?.Value ?? "";
        }
        <div class="@detailMini.MiniName-mini-view">
            <img src="@detailMini.Image"
                 alt="@detailMini.MiniName"
                 style="max-height:400px;max-width:400px;" />
            <p>Mini: @detailMini.MiniName</p>
            <p>Game: @detailMini.Game</p>
            <p>Faction: @detailMini.Faction</p>
            <div class="row">
                @foreach (var elem in detailMini.Elements)
                {
                    <div class="card">
                        <div class="card-header">
                            @elem.Name
                        </div>
                        @foreach (var paint in elem.PaintsUsed)
                        {
                            <div>
                                @paint.PaintName
                            </div>
                        }
                    </div>
                }
            </div>
            <button class="btn btn-danger" @onclick="DeleteMini">Delete Mini</button>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string mini_id { get; set; }
    Mini detailMini = new();
    User curUser = new();
    string curUsername = "";

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            detailMini = await cosmosDbService.GetMiniAsync(this.mini_id);
        }

        if (curUsername.Length > 0 && String.IsNullOrWhiteSpace(curUser.Username))
        {
            curUser = await cosmosDbService.GetUserByNameAsync(curUsername);
            logger.LogInformation($"Found user:{curUser.Username}");
            this.StateHasChanged();
        }
    }

    public async void DeleteMini()
    {
        var response = await iJSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {detailMini.MiniName}?");

        if (response)
        {
            if (curUser.Minis.Remove(detailMini.Id))
            {
                logger.LogInformation($"Successfully removed {detailMini.MiniName}");
            }
            await cosmosDbService.UpdateUserAsync(curUser.Id, curUser);
            await cosmosDbService.DeleteMiniAsync(detailMini.Id);
            navManager.NavigateTo("/myminis");
        }
    }
}
