@page "/community"

@inject ICosmosDbService cosmosDbService
@inject IJSRuntime iJSRuntime
@inject ILogger<MiniView> logger

<h3>Community Page</h3>
<div class="row">
    <div style="width:25%"></div>
    <div style="width: 25%; margin: auto;">
        <MudSelect T="string" @bind-Value="curSort" Label="Sort By" AnchorOrigin="Origin.BottomCenter">
            @foreach (var sort in sortOptions)
            {
                <MudSelectItem OnClick="SortMinis" Value="@sort">@sort</MudSelectItem>
            }
        </MudSelect>
    </div>
    <div style="width: 25%; margin: auto; margin-bottom: 0px;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SortMinis">Sort</MudButton>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        @{
            curUsername = context.User.FindFirst(c => c.Type == "signinname")?.Value ?? "";
        }
        <div class="community-page" style="h-100">
            <MiniPagination minis="@PublicMinis" user="@curUser"/>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="community-page" style="h-100">
            <MiniPagination minis="@PublicMinis" />
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<Mini> PublicMinis = new();
    string curUsername = "";
    User curUser = new();
    static string[] sortOptions = new string[] {
    "Most Liked",
    "Newest"
    };
    string curSort = sortOptions[0];

    protected override async Task OnInitializedAsync()
    {
        var responseMinis = await cosmosDbService.GetPublicMinis();
        PublicMinis = responseMinis.ToList();
        SortMinis();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (curUsername.Length > 0 && String.IsNullOrWhiteSpace(curUser.Username))
        {
            curUser = await cosmosDbService.GetUserByNameAsync(curUsername);
            logger.LogInformation($"Found user:{curUser.Username}");
            this.StateHasChanged();
        }
    }

    private void SortMinis()
    {
        switch (curSort) {
            case "Newest":
                SortByNewest();
                break;
            case "Most Liked":
                SortByLikes();
                break;
            default:
                SortByNewest();
                break;
        }
    }

    private void SortByNewest()
    {
        PublicMinis = PublicMinis.OrderByDescending(m => m.CreatedTime).ToList();
        this.StateHasChanged();
    }

    private void SortByLikes()
    {
        PublicMinis = PublicMinis.OrderByDescending(m => m.Likes.Count).ToList();
        this.StateHasChanged();
    }
}
