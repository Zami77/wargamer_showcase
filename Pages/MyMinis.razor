@page "/myminis"

@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options

@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject ICosmosDbService cosmosDbService;
@inject ILogger<MyMinis> logger

<AuthorizeView>
    <Authorized>
        @{
            curUsername = context.User.FindFirst(c => c.Type == "signinname")?.Value ?? "";
        }
        <h3>@curUsername's Minis</h3>
        <div class="@curUser.Username-minis">
            <div class="card-deck">
                @foreach (var mini in userMinis)
                {

                    <div class="@mini.MiniName">
                        <div class="card h-100" style="height:250px; width: 250px;">
                            <div class="card-header">
                                @mini.MiniName
                            </div>
                            <div class="card-body align-items-center d-flex justify-content-center">
                                <img
                                     style="height:200px; width:200px"
                                     src="@mini.Image"
                                     alt="@mini.MiniName" />
                                <br />

                            </div>
                            <div class="card card-footer">
                                <a href="/miniview/@mini.Id" class="btn btn-primary">
                                    Click for details
                                </a>
                                <a href="/miniedit/@mini.Id" class="btn btn-warning">
                                    Edit
                                </a>
                            </div>
                        </div>
                    </div>

                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        Log in to see your minis!
    </NotAuthorized>
</AuthorizeView>
@code {
    List<Mini> userMinis = new();
    string curUsername = "";
    User curUser = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (curUsername.Length > 0 && String.IsNullOrWhiteSpace(curUser.Username))
        {
            curUser = await cosmosDbService.GetUserByNameAsync(curUsername);
            logger.LogInformation($"Found user:{curUser.Username}");
            var responseMinis = await cosmosDbService.GetMinisForUser(curUser.Minis);
            userMinis = responseMinis.ToList();
            this.StateHasChanged();
        }
    }


}
