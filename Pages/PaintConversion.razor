@page "/paintconverter"
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options
@using System.Globalization
@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject ICosmosDbService cosmosDbService
@inject ILogger<PaintConversion> logger

<h2>Paint Converter</h2>

<EditForm Model="@selectedPaint" OnValidSubmit="HandleValidSubmit">
    <input type="text" 
           list="paint-search" 
           placeholder="Search from @allPaints.Count() paints!" 
           @bind-value="selectedPaint.PaintName"/>
    <datalist id="paint-search">
        @foreach (var paint in allPaints)
        {
            <option>@paint.PaintName</option>
        }
    </datalist>
    <button class="btn btn-primary" type="submit">Convert</button>
</EditForm>
@if (paintConverted)
{
    <h3>
        Converted Paints
    </h3>
    <MudSimpleTable Hover="true" Bordered="true">
        <thead>
            <tr>
                <td>Company</td>
                <td>Paint</td>
            </tr>
        </thead>
        <tbody>
            @foreach(var paint in convertedPaints)
            {
                <tr>
                    <td>@paint.Company</td>
                    <td>@paint.PaintName</td>
                    <td>
                        <svg width="20" height="20">
                            <rect width="20" height="20" style="fill:@RGBify(paint.HexColor);stroke-width:3;stroke:rgb(0,0,0)" />
                        </svg>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
@code {
    List<Paint> allPaints = new();
    Paint selectedPaint = new();
    Paint foundPaint = new();
    List<Paint> convertedPaints = new();
    bool paintConverted = false;
    const int hexDelta = 5000;

    protected override async Task OnInitializedAsync()
    {
        var response = await cosmosDbService.GetAllPaintsAsync();
        allPaints = response.ToList();
    }

    private void HandleValidSubmit()
    {
        selectedPaint = allPaints.Find(p => p.PaintName == selectedPaint.PaintName);
        if (selectedPaint == null)
        {
            selectedPaint = new();
            return;
        }
        logger.LogInformation($"Found paint conversions for {selectedPaint.PaintName}");
        foundPaint = new();
        convertedPaints = new();
        foundPaint = selectedPaint;
        var foundPaintHex = -1;
        foundPaintHex = int.TryParse(CleanHex(foundPaint.HexColor), NumberStyles.HexNumber, null, out foundPaintHex) ? foundPaintHex : -1;
        Predicate<Paint> similarPaints =
                delegate (Paint pnt) {
                    var checkHex = -1;
                    checkHex = int.TryParse(CleanHex(pnt.HexColor), NumberStyles.HexNumber, null, out checkHex) ? checkHex : -2;
                    return Math.Abs(foundPaintHex - checkHex) <= hexDelta;
                };
        convertedPaints = allPaints.FindAll(similarPaints);
        selectedPaint = new();
        paintConverted = true;
    }

    private string CleanHex(string hexString) {
        if (hexString.Length <= 1) {
            return hexString;
        }
        if (hexString[0] == '#') {
            return hexString.Remove(0, 1);
        }
        return hexString;
    }

    private string RGBify(string hexString)
    {
        if (hexString.Length <= 1)
        {
            return hexString;
        }
        if (hexString[0] != '#')
        {
            return "#" + hexString;
        }
        return hexString;
    }
}
