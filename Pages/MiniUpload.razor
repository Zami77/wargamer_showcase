@page "/miniupload"
@using System.IO
@using System.Text.RegularExpressions
@using BlazorInputFile
@using wargamer_showcase.Services

@inject AzureStorageService storageService
@inject ICosmosDbService cosmosDbService;
@inject ILogger<MiniUpload> logger
@inject IJSRuntime iJSRuntime;


<h3>Mini Upload</h3>
<div class="image-upload">
    <div class="row">
        <BlazorInputFile.InputFile OnChange="HandleImageInputChange" />
    </div>
    <div class="row">
        <img src="@dataUri">
    </div>
    <div class="row">
        <EditForm Model="@newMini" OnSubmit="@SubmitForm">
            <DataAnnotationsValidator />
            <p>
                <InputText id="mini-name" @bind-Value="newMini.MiniName" placeholder="Mini Name"/>
                <InputText id="mini-game" @bind-Value="newMini.Game" placeholder="Game mini is from" />
                <InputText id="mini-faction" @bind-Value="newMini.Faction" placeholder="Mini Faction" />
                <br />
                @foreach (var elem in newMini.Elements)
                {
                    <div class="@elem.Name">
                        <InputText @bind-Value="elem.Name" placeholder="Element name" />
                        @for (int i = 0; i < elem.PaintsUsed.Count; i++)
                        {
                        <div class="@elem.PaintsUsed[i]">
                            index: @i of count: @elem.PaintsUsed.Count 
                            <input type="text"
                                   list="paint-search"
                                   placeholder="Search from @allPaints.Count() paints!"
                                   @bind="@elem.PaintsUsed[i]" />
                            <datalist id="paint-search">
                                @foreach (var paint in allPaints)
                                {
                                    <option>@paint.PaintName</option>
                                }
                            </datalist>
                        </div>
                        }
                        @if (!String.IsNullOrWhiteSpace(elem.Name))
                        {
                            <button type="button" @onclick="() => AddPaintToElement(elem)">
                                Add Paint To Element
                            </button>
                        }
                    </div>
                }
                <button type="button" @onclick="AddElement">Add Element</button>
            </p>
        </EditForm>
    </div>
</div>

@code {
    private IFileListEntry selectedImage;
    private string dataUri;
    List<Paint> allPaints = new();

    /* Mini input fields */
    private Mini newMini = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await cosmosDbService.GetAllPaintsAsync();
        allPaints = response.ToList();
    }

    private async Task HandleImageInputChange(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            selectedImage = await rawFile.ToImageFileAsync(rawFile.Type, 1080, 1080);

            var stream = new MemoryStream();
            await selectedImage.Data.CopyToAsync(stream);

            dataUri = $"data:{rawFile.Type};base64,{Convert.ToBase64String(stream.ToArray())}";
        }
    }

    private async Task SubmitForm()
    {
        logger.LogInformation("SubmitForm selected");
        if (selectedImage != null)
        {
            //extract just base64 string without data:image/png;base64 (for example)
            var base64Data = Regex.Match(dataUri, @"data:image/(?<type>.+?),(?<data>.+)").Groups["data"].Value;
            var bytes = Convert.FromBase64String(base64Data);

            using (var stream = new MemoryStream(bytes))
            {
                var uploadedUri = await storageService.UploadFileToStorage(stream, "mini-images", selectedImage.Name);

                logger.LogInformation("Image uploaded to Blob storage");
                await iJSRuntime.InvokeVoidAsync("alert", selectedImage.Name + " was successfully uploaded!");

                selectedImage = null; // Reset image
                dataUri = "";
            }
        }
        else
        {
            await iJSRuntime.InvokeVoidAsync("alert", "Please select an image to upload.");
        }
    }

    private void AddElement()
    {
        newMini.Elements.Add(new MiniElement());
        logger.LogInformation("Added mini element");
    }

    private void AddPaintToElement(MiniElement elemToAdd)
    {
        foreach (var elem in newMini.Elements)
        {
            if (elem.Name == elemToAdd.Name)
            {
                elem.PaintsUsed.Add(new String(""));
                logger.LogInformation("Paint added to mini element");
                return;
            }
        }
        logger.LogError("Element not found to add paint to!");
    }
}
