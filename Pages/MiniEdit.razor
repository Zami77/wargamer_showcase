@page "/miniedit/{mini_id}"

@using System.IO
@using System.Text.RegularExpressions
@using BlazorInputFile
@using wargamer_showcase.Services
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Options

@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject Microsoft.AspNetCore.Components.NavigationManager navManager
@inject ICosmosDbService cosmosDbService
@inject IJSRuntime iJSRuntime
@inject IOptionsMonitor<MicrosoftIdentityOptions> microsoftIdentityOptions
@inject AzureStorageService storageService
@inject ICosmosDbService cosmosDbService
@inject ILogger<MiniEdit> logger

<h3>Mini Edit</h3>
<AuthorizeView>
    <Authorized>
        @{
            curUsername = context.User.FindFirst(c => c.Type == "signinname")?.Value ?? "";
        }
        @if (canEditMini)
        {
            <MiniForm curUser="curUser" allPaints="allPaints" mini="editMini" isEdit="true" />
            
        }
        else
        {
            <div>
                <p>You don't have permission to edit this mini.</p>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="not-logged-in">
            Please log in to edit Minis!
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string mini_id { get; set; }
    Mini editMini = new();
    User curUser = new();
    string curUsername = "";
    List<Paint> allPaints = new();
    bool canEditMini = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            editMini = await cosmosDbService.GetMiniAsync(this.mini_id);
        }

        if (curUsername.Length > 0 && String.IsNullOrWhiteSpace(curUser.Username))
        {
            curUser = await cosmosDbService.GetUserByNameAsync(curUsername);
            logger.LogInformation($"Found user:{curUser.Username}");
            canEditMini = curUser.Minis.Contains(this.mini_id);
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await cosmosDbService.GetAllPaintsAsync();
        allPaints = response.ToList();

    }
}
